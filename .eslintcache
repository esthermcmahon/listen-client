[{"/Users/esthersanders/workspace/Listen-client/src/index.js":"1","/Users/esthersanders/workspace/Listen-client/src/components/Listen.js":"2","/Users/esthersanders/workspace/Listen-client/src/components/ApplicationViews.js":"3","/Users/esthersanders/workspace/Listen-client/src/components/Musicians/MusicianProvider.js":"4","/Users/esthersanders/workspace/Listen-client/src/components/Comments/CommentProvider.js":"5","/Users/esthersanders/workspace/Listen-client/src/components/Categories/CategoryProvider.js":"6","/Users/esthersanders/workspace/Listen-client/src/components/Recordings/RecordingProvider.js":"7","/Users/esthersanders/workspace/Listen-client/src/components/Connections/ConnectionProvider.js":"8","/Users/esthersanders/workspace/Listen-client/src/components/Goals/GoalProvider.js":"9","/Users/esthersanders/workspace/Listen-client/src/components/Auth/Login.js":"10","/Users/esthersanders/workspace/Listen-client/src/components/Auth/Register.js":"11","/Users/esthersanders/workspace/Listen-client/src/components/Nav/Nav.js":"12","/Users/esthersanders/workspace/Listen-client/src/components/Recordings/NewRecording.js":"13","/Users/esthersanders/workspace/Listen-client/src/components/Recordings/PlayRecording.js":"14","/Users/esthersanders/workspace/Listen-client/src/components/Excerpts/ExcerptProvider.js":"15"},{"size":400,"mtime":1607982805393,"results":"16","hashOfConfig":"17"},{"size":1414,"mtime":1607982805383,"results":"18","hashOfConfig":"17"},{"size":1188,"mtime":1608136207300,"results":"19","hashOfConfig":"17"},{"size":1205,"mtime":1607982805388,"results":"20","hashOfConfig":"17"},{"size":2186,"mtime":1607982805381,"results":"21","hashOfConfig":"17"},{"size":2285,"mtime":1607982805380,"results":"22","hashOfConfig":"17"},{"size":2980,"mtime":1607982805392,"results":"23","hashOfConfig":"17"},{"size":2322,"mtime":1607982805381,"results":"24","hashOfConfig":"17"},{"size":2401,"mtime":1608136207301,"results":"25","hashOfConfig":"17"},{"size":3353,"mtime":1607982805379,"results":"26","hashOfConfig":"17"},{"size":4155,"mtime":1607982805380,"results":"27","hashOfConfig":"17"},{"size":2166,"mtime":1608136207302,"results":"28","hashOfConfig":"17"},{"size":3436,"mtime":1607982805390,"results":"29","hashOfConfig":"17"},{"size":1876,"mtime":1607982805392,"results":"30","hashOfConfig":"17"},{"size":0,"mtime":1608136207300,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1a1lzte",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/esthersanders/workspace/Listen-client/src/index.js",[],["70","71"],"/Users/esthersanders/workspace/Listen-client/src/components/Listen.js",[],"/Users/esthersanders/workspace/Listen-client/src/components/ApplicationViews.js",["72","73","74"],"//renders each imported component depending on the URl path \nimport React from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { CategoryProvider } from \"./Categories/CategoryProvider\"\nimport { CommentProvider } from \"./Comments/CommentProvider\"\nimport { ConnectionProvider } from \"./Connections/ConnectionProvider\"\nimport { GoalProvider } from \"./Goals/GoalProvider\"\nimport { MusicianProvider } from \"./Musicians/MusicianProvider\"\nimport { ExcerptProvider } from \"./Excerpts/ExcerptProvider\"\nimport { NewRecording } from \"./Recordings/NewRecording\";\nimport { PlayRecording } from \"./Recordings/PlayRecording\";\nimport { RecordingProvider } from \"./Recordings/RecordingProvider\"\nimport { ExcerptForm } from \"./Excerpts/ExcerptForm\";\nimport { GoalForm } from \"./Goals/GoalForm\"\n\nexport const ApplicationViews = (props) => {\n    return (\n        <>\n            <main\n                style={{\n                    margin: \"5rem 2rem\",\n                    lineHeight: \"1.75rem\",\n                }}>\n                <RecordingProvider>\n                    <Route exact path=\"/excerpts/:excerptId(\\d+)/newrecording\" render={props => <NewRecording {...props}/>} />\n                    <Route exact path=\"/recordings\" render={props => <PlayRecording {...props}/>} />\n                </RecordingProvider>\n\n                <ExcerptProvider>\n                    <Route exact path = \"/excerpts/create\" render={props => <ExcerptForm {...props}/>} />\n                    <Route exact path = \"/editexcerpt/:excerptId(\\d+)\" render = {props => <ExcerptForm {...props} />} />\n                </ExcerptProvider>\n                <CategoryProvider>\n                    <GoalProvider>\n                        <Route exact path = \"/goals/:recordingId(\\d+)/create\" render = {props => <GoalForm {...props} /> } />\n                        <Route exact path = \"/editgoal/:goalId(\\d+)/:recordingId(\\d+)\" render = {props => <GoalForm {...props} /> } />\n                    </GoalProvider>\n                </CategoryProvider>\n            </main>\n        </>\n\n    );\n};\n","/Users/esthersanders/workspace/Listen-client/src/components/Musicians/MusicianProvider.js",[],"/Users/esthersanders/workspace/Listen-client/src/components/Comments/CommentProvider.js",[],"/Users/esthersanders/workspace/Listen-client/src/components/Categories/CategoryProvider.js",[],"/Users/esthersanders/workspace/Listen-client/src/components/Recordings/RecordingProvider.js",["75"],"//module to handle all recording data manipulation\nimport React, { useState } from \"react\";\nexport const RecordingContext = React.createContext();\nexport const RecordingProvider = (props) => {\n  const [recordings, setRecordings] = useState([]);\n  const [recording, setRecording] = useState({});\n\n  const getRecordings = () => {\n    return fetch(\"http://localhost:8000/recordings\", {\n      headers: {\n        \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`\n      }\n    })\n      .then((res) => res.json())\n      .then(setRecordings);\n  };\n\n  const createRecording = (recording) => {\n    return fetch(\"http://localhost:8000/recordings\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`\n      },\n      body: JSON.stringify(recording),\n    })\n      .then((res) => res.json())\n      .then(getRecordings);\n  };\n\n  const deleteRecording= (recordingId) => {\n    return fetch(`http://localhost:8000/recordings/${recordingId}`, {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`,\n        },\n    })\n        .then(getRecordings)\n  }\n\n  const editRecording = recording => {\n    return fetch(`http://localhost:8000/recordings/${recording.id}`, {\n        method: \"PUT\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`\n        },\n        body: JSON.stringify(recording)\n    })\n        .then(getRecordings)\n}\n\nconst getRecordingById = (id) => {\n  return fetch(`http://localhost:8000/recordings/${id}` , {\n      headers: {\n        Authorization: `Token ${localStorage.getItem(\"listen_user_id\")}`,\n        \"Content-Type\": \"application/json\",\n      }\n    })\n      .then(res => res.json())\n}\n\nconst getRecordingByExcerpt = (excerptId) => {\n    return fetch(`http://localhost:8000/recordings?excerpt=${excerptId}` , {\n        headers: {\n          Authorization: `Token ${localStorage.getItem(\"listen_user_id\")}`,\n          \"Content-Type\": \"application/json\",   \n        }   \n      })\n        .then(res => res.json())\n}\n\nconst getRecordingByMusician = (musicianId) => {\n    return fetch(`http://localhost:8000/recordings?musician=${musicianId}` , {\n        headers: {\n          Authorization: `Token ${localStorage.getItem(\"listen_user_id\")}`,\n          \"Content-Type\": \"application/json\",   \n        }   \n      })\n        .then(res => res.json())\n}\n\n  return (\n    <RecordingContext.Provider\n      value={{\n        recording,\n        setRecording,\n        recordings,\n        setRecording,\n        createRecording,\n        deleteRecording,\n        editRecording,\n        getRecordings,\n        getRecordingById,\n        getRecordingByExcerpt,\n        getRecordingByMusician\n      }}\n    >\n      {props.children}\n    </RecordingContext.Provider>\n  );\n};","/Users/esthersanders/workspace/Listen-client/src/components/Connections/ConnectionProvider.js",["76"],"//module to handle all connection data manipulation- getting categories, and creating categories\nimport React, { useState } from \"react\";\nexport const ConnectionContext = React.createContext();\nexport const ConnectionProvider = (props) => {\n  const [connections, setConnections] = useState([]);\n  const [connection, setConnection] = useState({});\n\n  const getConnections = () => {\n    return fetch(\"http://localhost:8000/connections\", {\n      headers: {\n        \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`\n      }\n    })\n      .then((res) => res.json())\n      .then(setConnections);\n  };\n\n  const createConnection = (connection) => {\n    return fetch(\"http://localhost:8000/connections\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`\n      },\n      body: JSON.stringify(connection),\n    })\n      .then((res) => res.json())\n      .then(getConnections);\n  };\n\n  const deleteConnection= (connectionId) => {\n    return fetch(`http://localhost:8000/connections/${connectionId}`, {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`,\n        },\n    })\n        .then(getConnections)\n  }\n\n  const editConnection = connection => {\n    return fetch(`http://localhost:8000/connections/${connection.id}`, {\n        method: \"PUT\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`\n        },\n        body: JSON.stringify(connection)\n    })\n        .then(getConnections)\n}\n\nconst getConnectionById = (id) => {\n  return fetch(`http://localhost:8000/connections/${id}` , {\n      headers: {\n        Authorization: `Token ${localStorage.getItem(\"listen_user_id\")}`,\n        \"Content-Type\": \"application/json\",\n      }\n    })\n      .then(res => res.json())\n}\n\n  return (\n    <ConnectionContext.Provider\n      value={{\n        connection,\n        setConnection,\n        connections,\n        setConnection,\n        createConnection,\n        deleteConnection,\n        editConnection,\n        getConnectionById\n      }}\n    >\n      {props.children}\n    </ConnectionContext.Provider>\n  );\n};\n","/Users/esthersanders/workspace/Listen-client/src/components/Goals/GoalProvider.js",["77"],"//module to handle all goal data manipulation\nimport React, { useState } from \"react\";\nexport const GoalContext = React.createContext();\nexport const GoalProvider = (props) => {\n  const [goals, setGoals] = useState([]);\n  const [goal, setGoal] = useState({});\n\n  const getGoals = () => {\n    return fetch(\"http://localhost:8000/goals\", {\n      headers: {\n        \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`\n      }\n    })\n      .then((res) => res.json())\n      .then(setGoals);\n  };\n\n  const createGoal = (goal) => {\n    return fetch(\"http://localhost:8000/goals\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`\n      },\n      body: JSON.stringify(goal),\n    })\n      .then((res) => res.json())\n      .then(getGoals);\n  };\n\n  const deleteGoal= (goalId) => {\n    return fetch(`http://localhost:8000/goals/${goalId}`, {\n        method: \"DELETE\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`,\n        },\n    })\n        .then(getGoals)\n  }\n\n  const editGoal = goal => {\n    return fetch(`http://localhost:8000/goals/${goal.id}`, {\n        method: \"PUT\",\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": `Token ${localStorage.getItem(\"listen_user_id\")}`\n        },\n        body: JSON.stringify(goal)\n    })\n        .then(getGoals)\n}\n\nconst getGoalById = (id) => {\n  return fetch(`http://localhost:8000/goals/${id}` , {\n      headers: {\n        Authorization: `Token ${localStorage.getItem(\"listen_user_id\")}`,\n        \"Content-Type\": \"application/json\",\n      }\n    })\n      .then(res => res.json())\n}\n\nconst getGoalByRecording = (recordingId) => {\n    return fetch(`http://localhost:8000/goals?recording=${recordingId}` , {\n        headers: {\n          Authorization: `Token ${localStorage.getItem(\"listen_user_id\")}`,\n          \"Content-Type\": \"application/json\",   \n        }   \n      })\n        .then(res => res.json())\n}\n\n  return (\n    <GoalContext.Provider\n      value={{\n        goal,\n        setGoal,\n        goals,\n        getGoals,\n        setGoal,\n        createGoal,\n        deleteGoal,\n        editGoal,\n        getGoalById,\n        getGoalByRecording\n      }}\n    >\n      {props.children}\n    </GoalContext.Provider>\n  );\n};\n","/Users/esthersanders/workspace/Listen-client/src/components/Auth/Login.js",["78","79"],"//login page\nimport React, { useRef, useState } from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport {\n  Anchor,\n  Box,\n  Button,\n  Form,\n  FormField,\n  Heading,\n  Layer,\n  TextInput,\n} from \"grommet\";\n\nexport const Login = (props) => {\n  const user = useRef();\n  const password = useRef();\n\n  const [show, setShow] = useState();\n  const [showUser, setShowUser] = useState();\n\n  // see if user already exists\n  const existingUserCheck = () => {\n    return fetch(`http://localhost:8000/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({\n        username: user.current.value,\n        password: password.current.value,\n      }),\n    })\n      .then((res) => {\n        return res.json();\n      })\n      .then((user) => {\n        return user !== undefined ? user : false;\n      });\n  };\n\n  const handleLogin = (e) => {\n    e.preventDefault();\n    existingUserCheck().then((exists) => {\n      if (exists.valid) {\n        localStorage.setItem(\"listen_user_id\", exists.token);\n        props.history.push(\"/home\");\n      } else if (exists.valid != true) {\n        setShow(true);\n      } else if (!exists) {\n        setShowUser(true);\n      }\n    });\n  };\n\n  return (\n    <Box direction=\"column\" animation=\"fadeIn\">\n      <Box className=\"container--login\">\n        {showUser && (\n          <Layer>\n            <Heading level=\"3\">User does not exist</Heading>\n            <Button\n              label=\"Close\"\n              className=\"button--close\"\n              onClick={() => setShowUser(false)}\n            />\n          </Layer>\n        )}\n        {show && (\n          <Layer>\n            <Heading level=\"3\">Password does not match</Heading>\n            <Button\n              className=\"button--close\"\n              label=\"Close\"\n              primary\n              onClick={() => setShow(false)}\n            />\n          </Layer>\n        )}\n      </Box>\n      <Box direction=\"column\" alignSelf=\"center\">\n        <Heading level=\"1\">Listen</Heading>\n        <Heading level=\"2\">Sign In</Heading>\n        <Form className=\"form--login\" onSubmit={handleLogin}>\n          <FormField label=\"Username\" htmlFor=\"inputEmail\">\n            <TextInput\n              ref={user}\n              type=\"text\"\n              id=\"username\"\n              placeholder=\"User Name\"\n              required\n            />\n          </FormField>\n          <FormField label=\"Password\" htmlFor=\"inputPassword\">\n            <TextInput\n              ref={password}\n              type=\"password\"\n              id=\"password\"\n              placeholder=\"Password\"\n              required\n            />\n          </FormField>\n          <FormField>\n            <Box align=\"center\" pad=\"medium\">\n              <Button\n                size=\"large\"\n                label=\"sign in\"\n                fill={false}\n                margin=\"small\"\n                pad=\"small\"\n                primary\n                type=\"submit\"\n              />\n            </Box>\n          </FormField>\n        </Form>\n      </Box>\n      <Box className=\"link--register\">\n        <Anchor\n          as={Link}\n          to=\"/register\"\n          title=\"register\"\n          href=\"/register\"\n          margin=\"small\"\n          justify=\"center\"\n        >\n          Not a member yet?\n        </Anchor>\n      </Box>\n    </Box>\n  );\n};","/Users/esthersanders/workspace/Listen-client/src/components/Auth/Register.js",[],"/Users/esthersanders/workspace/Listen-client/src/components/Nav/Nav.js",["80","81","82","83","84"],"/Users/esthersanders/workspace/Listen-client/src/components/Recordings/NewRecording.js",["85","86","87"],"import { Recorder } from 'react-voice-recorder'\nimport 'react-voice-recorder/dist/index.css'\nimport { RecordingContext } from \"./RecordingProvider\"\nimport React, { useContext, useState, useEffect } from \"react\"\nimport {\n  Box,\n  Button,\n  TextInput,\n  Text\n} from \"grommet\"\n\n\n\nexport const NewRecording = (props) => {\n  //set state state var and setter function \n  // use Effect when recording ends, reset state\n\n  const { getRecordings, createRecording } = useContext(RecordingContext)\n  const [currentRecording, setCurrentRecording] = useState({})\n  const excerptId = props.match.params.excerptId\n\n  const [audio, setAudio] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    getRecordings()\n  }, [])\n\n  const handleChange = (event) => {\n    const newRecordingState = Object.assign({}, currentRecording)\n    newRecordingState[event.target.name] = event.target.value\n    setCurrentRecording(newRecordingState)\n  }\n  const jsonDate = new Date(Date.now()).toJSON().slice(0, 10);\n\n  const constructNewRecording = () => {\n    const newRecording = {\n      label: currentRecording.label,\n      excerpt: excerptId,\n      audio: audio,\n      date: jsonDate\n\n    }\n\n    createRecording(newRecording)\n      .then(() => props.history.push(\"/home\"))\n  }\n\n\n  const uploadAudio = () => {\n    var reader = new FileReader()\n\n    reader.readAsDataURL(recorderState.blob)\n    reader.onloadend = function () {\n      var base64data = reader.result\n      // console.log(base64data)\n      const data = new FormData()\n      data.append('file', base64data)\n      data.append('upload_preset', 'zv6murma')\n      data.append('resource_type', 'video')\n      fetch(\"https://api.cloudinary.com/v1_1/dkicrisrl/upload\", {\n        method: \"POST\",\n        headers: {\n          \"Accept\": \"application/json\"\n\n        },\n        body: data\n      })\n        .then(res => res.json())\n        .then(res => {\n          const audioresult = res\n          setAudio(audioresult.secure_url)\n        })   \n\n    }\n  }\n\n  const [recorderState, setRecorderState] = useState({\n    url: null,\n    blob: null,\n    chunks: null,\n    duration: {\n      h: 0,\n      m: 0,\n      s: 0\n    }\n  })\n\n  const handleAudioStop = (data) => {\n    console.log(data)\n    setRecorderState(data)\n    \n  }\n  \n  const handleAudioUpload = () => {\n    uploadAudio()\n  }\n\n  const handleReset = () => {\n    const reset = {\n      url: null,\n      blob: null,\n      chunks: null,\n      duration: {\n        h: 0,\n        m: 0,\n        s: 0\n      }\n    };\n    setRecorderState(reset)\n  }\n\n\n  return (\n    <>\n      <Recorder\n        record={true}\n        title={\"New recording\"}\n        audioURL={recorderState.url}\n        showUIAudio\n        handleAudioStop={data => handleAudioStop(data)}\n        handleAudioUpload={data => handleAudioUpload(data)}\n        handleRest={() => handleReset()}\n\n      />\n\n\n      <Box>\n        <Text htmlFor=\"label\">Enter excerpt name and take: </Text>\n        <Box margin=\"small\">\n          <TextInput\n            type=\"text\"\n            name=\"label\"\n            required\n            autoFocus\n            placeholder=\"ex: Excerpt take 1\"\n            value={currentRecording.label}\n            onChange={handleChange}\n          />\n        </Box>\n      </Box>\n      <Button\n        fill={false}\n        primary\n        label=\"Save\"\n        onClick={(evt) => {\n          constructNewRecording(evt)\n            ;\n        }}\n      />\n\n\n    </>\n  )\n\n\n}\n\n","/Users/esthersanders/workspace/Listen-client/src/components/Recordings/PlayRecording.js",["88","89","90","91"],"//module to play a recording and render its date and label\nimport React, { useEffect, useContext, useState } from \"react\";\nimport { RecordingContext } from \"./RecordingProvider\";\nimport { Button, Box, Heading, List, Text } from \"grommet\";\nimport { Link } from \"react-router-dom\";\n\nexport const PlayRecording = (props) => {\n  const { recordings, getRecordings } = useContext(RecordingContext);\n  \n//   let audioFile = new File([recordingObject.audio])\n\n  //gets the recordings from the database\n  useEffect(() => {\n    getRecordings();\n  }, []);\n\n\n  return (\n    <Box>\n      <Heading level=\"1\">Recordings</Heading>\n\n      <Box className=\"categoryList\" direction=\"row\">\n        <Box background=\"background-contrast\" elevation=\"small\">\n        <List data={recordings} primaryKey=\"label\" />\n        </Box>\n        <Box>\n\n        <audio controls>\n                        <source src=\"http://localhost:3000/21bce805-3519-4193-aabc-126b08896615\" type=\"audio/ogg\" format=\"audio/ogg\"></source>\n                        <source src=\"http://localhost:3000/21bce805-3519-4193-aabc-126b08896615\" type=\"audio/mpeg\" format=\"audio/mpeg\"></source>\n                            \n                    </audio>\n        \n\n          {recordings.map((recordingObject) => {\n            return (\n              <>\n                <Box direction=\"row\" align=\"center\">\n                    <Text>{recordingObject.label}</Text>\n                    <Text>{recordingObject.date}</Text>\n                    <audio controls>\n                        <source src={recordingObject.audio} type=\"audio/ogg\" format=\"audio/ogg\"></source>\n                        <source src={recordingObject.audio} type=\"audio/mpeg\" format=\"audio/mpeg\"></source>\n                            \n                    </audio>\n                </Box>\n              </>\n            );\n          })}\n        </Box>\n      </Box>\n    </Box>\n  );\n};","/Users/esthersanders/workspace/Listen-client/src/components/Excerpts/ExcerptProvider.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":25},{"ruleId":"96","severity":1,"message":"100","line":6,"column":10,"nodeType":"98","messageId":"99","endLine":6,"endColumn":28},{"ruleId":"96","severity":1,"message":"101","line":8,"column":10,"nodeType":"98","messageId":"99","endLine":8,"endColumn":26},{"ruleId":"102","severity":1,"message":"103","line":90,"column":9,"nodeType":"104","messageId":"105","endLine":90,"endColumn":21},{"ruleId":"102","severity":1,"message":"106","line":70,"column":9,"nodeType":"104","messageId":"105","endLine":70,"endColumn":22},{"ruleId":"102","severity":1,"message":"107","line":81,"column":9,"nodeType":"104","messageId":"105","endLine":81,"endColumn":16},{"ruleId":"96","severity":1,"message":"108","line":3,"column":16,"nodeType":"98","messageId":"99","endLine":3,"endColumn":26},{"ruleId":"109","severity":1,"message":"110","line":48,"column":31,"nodeType":"111","messageId":"105","endLine":48,"endColumn":33},{"ruleId":"96","severity":1,"message":"112","line":2,"column":17,"nodeType":"98","messageId":"99","endLine":2,"endColumn":27},{"ruleId":"96","severity":1,"message":"113","line":2,"column":29,"nodeType":"98","messageId":"99","endLine":2,"endColumn":38},{"ruleId":"96","severity":1,"message":"114","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":25},{"ruleId":"96","severity":1,"message":"115","line":5,"column":32,"nodeType":"98","messageId":"99","endLine":5,"endColumn":37},{"ruleId":"96","severity":1,"message":"116","line":5,"column":44,"nodeType":"98","messageId":"99","endLine":5,"endColumn":48},{"ruleId":"96","severity":1,"message":"117","line":23,"column":10,"nodeType":"98","messageId":"99","endLine":23,"endColumn":17},{"ruleId":"96","severity":1,"message":"118","line":23,"column":19,"nodeType":"98","messageId":"99","endLine":23,"endColumn":29},{"ruleId":"119","severity":1,"message":"120","line":27,"column":6,"nodeType":"121","endLine":27,"endColumn":8,"suggestions":"122"},{"ruleId":"96","severity":1,"message":"123","line":2,"column":40,"nodeType":"98","messageId":"99","endLine":2,"endColumn":48},{"ruleId":"96","severity":1,"message":"124","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":16},{"ruleId":"96","severity":1,"message":"125","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":14},{"ruleId":"119","severity":1,"message":"120","line":15,"column":6,"nodeType":"121","endLine":15,"endColumn":8,"suggestions":"126"},"no-native-reassign",["127"],"no-negated-in-lhs",["128"],"no-unused-vars","'CommentProvider' is defined but never used.","Identifier","unusedVar","'ConnectionProvider' is defined but never used.","'MusicianProvider' is defined but never used.","no-dupe-keys","Duplicate key 'setRecording'.","ObjectExpression","unexpected","Duplicate key 'setConnection'.","Duplicate key 'setGoal'.","'useHistory' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","'useContext' is defined but never used.","'useEffect' is defined but never used.","'MusicianContext' is defined but never used.","'Image' is defined but never used.","'Text' is defined but never used.","'loading' is assigned a value but never used.","'setLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getRecordings'. Either include it or remove the dependency array.","ArrayExpression",["129"],"'useState' is defined but never used.","'Button' is defined but never used.","'Link' is defined but never used.",["130"],"no-global-assign","no-unsafe-negation",{"desc":"131","fix":"132"},{"desc":"131","fix":"133"},"Update the dependencies array to be: [getRecordings]",{"range":"134","text":"135"},{"range":"136","text":"135"},[735,737],"[getRecordings]",[540,542]]